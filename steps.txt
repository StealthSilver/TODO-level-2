initialize a new git repo , TODO level 2

BACKEND 

step 1 : npm init in the backend directory
step 2 : npm install express cors
step 3 : create an express server and make it listen on a port say 3000
step 4 : app.use(cors());
         app.use(express.json()); 

    •	cors(): Allows the frontend (which runs on a different port) to communicate with the backend.
	•	express.json(): Automatically parses JSON payloads in POST requests.

step 5 : initialize an empty tasks array
step 6 : create a get route to fetch all tasks from the array
step 7 : create a post route which adds a new task to the tasks array. It expects the frontend to send a task object.
step 8 : create a delete route which deletes a task based on its unique ID (id).


FRONTEND

use the same skeleton and the styles as the previous project
HTML and CSS file will be the same

for script.js 

step 1 : define the backend path -> const API_URL = 'http://localhost:3000/tasks';
step 2 : add these lines on the top
         document.addEventListener('DOMContentLoaded', () => {
         loadTasks();
          });
          DOMContentLoaded: Ensures tasks are loaded when the page finishes loading.
step 3 : create the load function with the async , await syntax and use fetch to get data from the backend API and render them in the frontend
step 4 : create an add function which captures the task input, creates a task object and send it to the correct route in backend 
step 5 : create a delete function which sends a request in the backend to delete the task with a given id
step 6 : create a render function which dynamically creates a li for the tasks and appends them in the ul

